ROAD MAP FOR BIT TORRENT CLIENT

BY:
RAHUL PASUNURI (rahupasu@indiana.edu)
MANISH KUMAR (manivutt@indiana.edu)

For Milestone - 1, we are able to parse the torrent files successfully. The code for parsing is can be seen in the file with name "bencode.cpp". Following are the files that will be submitted in the .tar once the project is completed.

1.	bencode.cpp|bencode.h
	These files will contain the code related to the bencoding of the torrent files. This will be imported by peers for parsing the torrent files. 

2. client.cpp | client.h:
	This is the client class, we wrote for the project 1. This class will be inherited by the peer class, which needs to act like a client.

3. server.cpp | server.h:
	This is the server class, we wrote for the project 1. This class will be inherited by the peer class, which needs to act like a server.

3. bt_client.cpp|bt_client.h:
	These files will contain the code required by a peer. As the peers in bit-torrent require both client and server side functionalities, they inherit 	those 		features from client.cpp and server.cpp, which we implemented for project -1

4. bt_lib.cpp|bt_lib.h:
	These contain data structures to hold the torrent file information and some bit torrent functionilites. These files would be used by all the the 		other classes.

5. bt_setup.cpp|bt_setup.h
	These files contain the parsing code to parse the peer string that is given as input from command line to obtain peer_id, and programs to save the log, 	torrent files.
	

6. makefile 
	This file will contain the makefile commands, which can be used to build the project easily.	
	
7. readme
	This will contain a detailed description on how to use the project, and the functionalities of the project.

As parsing of the torrent file is completed, our next goals are to implement the following tasks in the order mentioned. 

1. The handshake protocol between peers. 
	We are considering to implement this code in the Client.cpp where both the peers transmit the same messages to each other and is done at 4 stages as per the 		specifications of the bit torrent client. Once the hand shaking is completed successfully process control goes to the peer messaging system and that's how the 		peers communicate further.

2. Methods to handle the multiple socket connections and implement the peer message system stating choked, unchoked, interested etc.

3. Structuring the client.cpp and lib.cpp

4. 1 seeder and 1 leecher
	Once the basic functionalities are completed, we will first implement the 1seeder 1 leecher approach where one peer(seeder) will be the owner of the file and 		the other one will be downloading the file(leecher).

5. n seeders and n leechers
	Updating the functionalities so that our code will be capable to handle multiple file downloading requests to multiple seeders.
